package com.example.driverwiki;

import android.content.Intent;
import android.os.Bundle;

import com.example.driverwiki.Views.DriversAdapter;
import com.example.driverwiki.interfaces.ListInterface;
import com.example.driverwiki.models.DriverEntity;
import com.example.driverwiki.presenters.ListPresenter;
import com.google.android.material.floatingactionbutton.FloatingActionButton;

import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.appcompat.app.AppCompatActivity;
import androidx.appcompat.widget.Toolbar;
import androidx.recyclerview.widget.ItemTouchHelper;
import androidx.recyclerview.widget.LinearLayoutManager;
import androidx.recyclerview.widget.RecyclerView;

import android.util.Log;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.widget.TextView;
import android.widget.Toast;

import java.util.ArrayList;

public class ListActivity extends AppCompatActivity implements ListInterface.View {
    private ListInterface.Presenter presenter;
    private DriversAdapter adapter;
    private ArrayList<DriverEntity> lista;
    private DriverEntity deleted;
    String nameFilter = null;
    String dateFilter = null;
    String TAG = "DriverWiki/ListActivity";


    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        presenter = new ListPresenter(this);
        setContentView(R.layout.activity_list);
        Toolbar toolbar = findViewById(R.id.toolbar);
        setSupportActionBar(toolbar);

        toolbar.setTitle("DriverWiki App");
        //List Creation
        /*DriverEntity d1 = new DriverEntity(d.getId(), d.getName(), d.getGps(), d.getVictories(), d.getDate(), d.isActive(), d.isWorldchampion(), d.getPhoto());
        d1.setName("Lewis Hamilton");
        d1.setGps("380");
        d1.setPhoto("");
        DriverEntity d2 = new DriverEntity(d.getId(), d.getName(), d.getGps(), d.getVictories(), d.getDate(), d.isActive(), d.isWorldchampion(), d.getPhoto());
        d2.setName("Michael Schumacher");
        d2.setGps("377");
        DriverEntity d3 = new DriverEntity(d.getId(), d.getName(), d.getGps(), d.getVictories(), d.getDate(), d.isActive(), d.isWorldchampion(), d.getPhoto());
        d3.setName("Fernando Alonso");
        d3.setGps("374");
        d3.setPhoto("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");
        DriverEntity d4 = new DriverEntity(d.getId(), d.getName(), d.getGps(), d.getVictories(), d.getDate(), d.isActive(), d.isWorldchampion(), d.getPhoto());
        d4.setName("Daniel Ricciardo");
        d4.setGps("305");
        DriverEntity d5 = new DriverEntity(d.getId(), d.getName(), d.getGps(), d.getVictories(), d.getDate(), d.isActive(), d.isWorldchampion(), d.getPhoto());
        d5.setName("Sebastian Vettel");
        d5.setGps("359");
        d5.setPhoto("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");
        DriverEntity d6 = new DriverEntity(d.getId(), d.getName(), d.getGps(), d.getVictories(), d.getDate(), d.isActive(), d.isWorldchampion(), d.getPhoto());
        d6.setName("Max Verstappen");
        d6.setGps("179");
        DriverEntity d7 = new DriverEntity(d.getId(), d.getName(), d.getGps(), d.getVictories(), d.getDate(), d.isActive(), d.isWorldchampion(), d.getPhoto());
        d7.setName("Jenson Button");
        d7.setGps("301");
        d7.setPhoto("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");
        DriverEntity d8 = new DriverEntity(d.getId(), d.getName(), d.getGps(), d.getVictories(), d.getDate(), d.isActive(), d.isWorldchampion(), d.getPhoto());
        d8.setName("Ayrton Senna");
        d8.setGps("219");
        d8.setPhoto("/9j/4AAQSkZJRgABAQAAAQABAAD//gA7Q1JFQVRPUjogZ2QtanBlZyB2MS4wICh1c2luZyBJSkcgSlBFRyB2NjIpLCBxdWFsaXR5ID0gMzAK/9sAQwAbEhQXFBEbFxYXHhwbIChCKyglJShROj0wQmBVZWRfVV1baniZgWpxkHNbXYW1hpCeo6utq2eAvMm6pseZqKuk/9sAQwEcHh4oIyhOKytOpG5dbqSkpKSkpKSkpKSkpKSkpKSkpKSkpKSkpKSkpKSkpKSkpKSkpKSkpKSkpKSkpKSkpKSk/8AAEQgAsQEUAwEiAAIRAQMRAf/EAB8AAAEFAQEBAQEBAAAAAAAAAAABAgMEBQYHCAkKC//EALUQAAIBAwMCBAMFBQQEAAABfQECAwAEEQUSITFBBhNRYQcicRQygZGhCCNCscEVUtHwJDNicoIJChYXGBkaJSYnKCkqNDU2Nzg5OkNERUZHSElKU1RVVldYWVpjZGVmZ2hpanN0dXZ3eHl6g4SFhoeIiYqSk5SVlpeYmZqio6Slpqeoqaqys7S1tre4ubrCw8TFxsfIycrS09TV1tfY2drh4uPk5ebn6Onq8fLz9PX29/j5+v/EAB8BAAMBAQEBAQEBAQEAAAAAAAABAgMEBQYHCAkKC//EALURAAIBAgQEAwQHBQQEAAECdwABAgMRBAUhMQYSQVEHYXETIjKBCBRCkaGxwQkjM1LwFWJy0QoWJDThJfEXGBkaJicoKSo1Njc4OTpDREVGR0hJSlNUVVZXWFlaY2RlZmdoaWpzdHV2d3h5eoKDhIWGh4iJipKTlJWWl5iZmqKjpKWmp6ipqrKztLW2t7i5usLDxMXGx8jJytLT1NXW19jZ2uLj5OXm5+jp6vLz9PX29/j5+v/aAAwDAQACEQMRAD8A1GPNRk0rGmE0xAWpjvjH1oJqvcylEJCkj27UAFzdJByx5Pasm6umuDzwOwqKaVpXLMck1HSKEoooApgHJ604UnTrS9aQC4FIW4wKU9KYR70AJk54p2896SkpgPDEdDU6S7WWQcMOvvVXpT1yRSA6CCQSRhgfrUpNY9hc+XJsY/K36GtXeDxmmIUmoJ3wKlY4FUbqTANA0incvlsVCBSk7mzRUmqQUtJS0igpKWikMKSlpKACiiimISiiigQlFLSUxBRRRQB1JNNJpTTDVGAjGqOoOFiIJ5PSrjGsK6kMk7knocCkNEJpBntS0A0xiGjPFBOWqTycx7qQDF5oFKAQORSUAOzkYprCinDmgBnSlA5qaG3aZwo4HrU0lo6nCjNJtDUWVWAzx0oAK05omDbdpBPah1ZTg0BYbnmrsF0xdVP0qjT4zlx+dAjYlkwtZlxJualMx8vk9ark7jmmy4iilpBS1JogooopDCiikoAKKKKYgooAz0qVIHb2pXSAhoq6lnn1NSi0C/w1DqxQGbg+lBrVEK/3aQwIf4aXtkFjKorSNomelFP2sRWNU0w041HI4Uc1uc5VuboRtsNZDHLMfU5qzcuJZnVjgjoaqHg0ihQuRmmkYNKp4IpDmgAUc1aRgEOegFVhVqGBXILZ+lKRUSexjEiMzjIJ4qz9hgf+HB9jT4lAUADAFSrWdzSxRfTsNlY9y+xqWC0VTl0AJ6A9qvrThTEVzECVwuAKesYFSkUhOKQFV7ZPN8w5JrP1GIJhxWuSMVnaoP3P0NC3B7GVupwPNNVc0prUyFds9OlItJjinCky4iiloopGqCiiikAUlLRQAlOVC1SQReY3PSpTAzvgcKKTkluJvsJDCxOAMD1q4sYHFKi4AFSAVyzqXBIFJUcU4kmgClxWNyrDQKeI1YcdaMUYNFwGlMHpRUm71oouwHGqN/u25HSrrVVu13xlTmvUZyox3JY571GeetSPwxFRk0DAUv4UlL1GaYD0UntWhEuAKhgjyikmrHSspM0irFhDkVKtVklRR8zAVIt1ETwamxVy0maeKhSZCeGFTbxxTEFNIzT8jJHpTWdQDyKAIiKpakP3BqeW7jTqap3twksBCnmhLUG9DPA+bihhShehzQ1amY0dDThTKeKTLiLRRRUmgUUUUDCnxRmR8dqZ1q4IXSENH96gmTsJLAxXMRxt60izzRf6xCQO9TQXSxpidSOaLq6jFtuQgljyPahpSRjdofb3KTNtAwatAVT06PCGVhy1aOUK88Vw1Eua0TZPS7I8U9nCqMDJx0HrVK8u1hyqnLVc0zLW4aReSM5ralSad5ESmugts7XCkqNuDjnrSWbNO0259wRtoGMVH9tjtpnTaCAONvc1SlunacyRfus9QO9dHuoShKWqRZ8+/BI+yr1oqqbmc8mVqKOZF+wkajCoZFyKsMKrzqzRsFODjitDnMKQEsfTNCRb84odyPkYYKmraRshHoaluxpFXKckZQ4NMrVkiQgbh1FUpodr8dKFIHEs23+qFPbJHFJCpWPBqeNMis+pp0KX2ZiclsfWmPGqcGYZ9KuTQFsZY4z2prWjBg8DbTjmqTJaKsakHIJI9av28hbC5PWn+QuyNR1UYz601VCS/L0BpNjSLkgYKWBxxWXcyOwI5A9TWtK26Ij2qq6LgqRkMMdKEBliIBsM+04zyCKkaACB2GTgVcgtI41bHzbuMn0qX7OqQMoHUU2xJGMqkISe1RlquXSeVagEYLVRFUtRNWHCnCkAp1JlxClpKKRYUUUYoAkhXLZPQVbMxiClhw3Sqy/LFjualu2DCMDstBzzepaWSGYfMAaRrG2k5AxWdmmtcuvCuR+NJRJUmac1zFbKEUgn0FNlRryBiH2eW3zfSspQXbJ5JrRicpGRjlhhh60RpxhqU5Nkl5biQq0XzAxgA+9X9Oj3W3kSk5xVBLjHGz8qljvhG4O00S16iTRDeQGKbaB1FPg0+STl/lWtjbHMqzAAnGRWfNqflNMmz5o+nPWhRNvbPlsiZNPgVcFc+5op8V3GYUaRgrMucUVVkZ88u4MKicVORUbCrMzIv7YsfMUduanhIkERPQjn61PcHao9yBVePCsVXqDkCokaQeo6bpgHHPamTxDAP41IQW465pcHySrdRUGjI05WpYjg4qCM8kVMnUUAWAoYc05YV96ENPoEMdQoOBVZgB07VbYcVVcgH3pMaLEZyopFGRj0pIgdtKoIYigCRQM9KSX7tPGMVHJzgUxGbrEchjjlx8nT8azVFdjNaLNZGFh1H61yUsLQTNE4wVOK0WxF7sVRS7aFqRalmiYzZS+XUygU7ApXHcg8unCOpcCnL1ouK5HLEQoI5qs+7p3rTXBwCOKqTgb3I9aUZJmbjqVADzUaKWarWzeQq9TU8dkQowea0uS1YihjC1Pnmni3de2ajaNwfumodyRsmVO4dKTeDwafgspBU/lVbGHwQaLCN7S5/wB0iN0yVqpqFlm/3YJVyc/lTbB8K4x0ww59K2WdGQEkcVSKRkwiQ28QEQOFwciitMN6CinYBjUxqkYVG1UIrzIJEKsODWLM0kVwcMcqeprdasrUosHzB360holt7yJyCxCt3Bqw7LgHIyenvWDVuyOQw7jkVLjY0UrlwjD1IpqNzyKcvaoKLEbGp1NVUap0NADpG4NUwM/Mattgg1Vkg3cA5HpQNFy3dCvXBocgSgDvVOOKVDheAasxKFJY8t6mgCXoKfZqHueRnAzTGI25qXTeXkb2AprcmWxfrH12x8xPtEY+ZevuK2KRlDKQehqzJHFLUi1a1OyNrOSo/dt09qqA1LNUSg07NRg07NSUOzTlPNR0qnmh7CLac1UuUKyN6GrUfFSSICM4rnUuWRTV0ULWMjc7dulFveu0+0gbauqg2nAqCO0jjYv3rVTTvcixaaZETLVSmvj0jXHvTWcO7DNBtwBuJrWKstSHqNF7Pjkj8qrzszNuzyafJG2CQOBVYknqataisO81l6Mc0vnyn/lo351HijFMB/nS/wDPVv8AvqimYooEdiRTGFSkUwigRAwqtPGJFKsMg1cYVE60AYk1l5eWDcUyE+U+ex4NWdQk/eBB0XrVcGobN4R0LJkz0qWMgjFUTleRU8EuRUjasWQSGqwjYQmqx5GRU8JBHNIQgY5qVNo+8w/OoJocnIYj6UyOHJwZSPegdi/lOuRio2wTkGoRbAf8tqVYV3feLfjTCxJk7Dmoor9rSfAGUP3hT5SFTArJeTfMzds8UhxSe510MyTxiSM5U1JXO6ZeG2lwx/dt19veuhByMjpVp3Mpw5WQ3VulzC0bjrXMXNu9tMY3HTofWuuqnqFkl3Fg8MOhoaJi7HNCnClkheGQo4wRSVJqBpjsVGRT6ZJypoQMtW10jgBuDWgkayRnDVzg4NSrdTIMK5AolSjIzUmjY2Mp45FI4+XpWXHfzJ1Oasx6ouMOpqXS7D5yuNqFyxwc8VcRd4DNz6Vn3skcsoaPPvVuwnDoI26jpWjWgkyV0G0issrhiK15OlZzxtvOAetERsgxRip/Jf8AumgQOf4TVEkOKKl8pvSigDqzTDTzTDTJGGoZCACTwBUzVTvQTbuB6UDWrMm4O+V29TUSnHFPzTSM81mdNuw8HNJgqdy00GpFOaWxatLRk8EobKGp4Xw1USO69RT45/m+bg0iJRsahG4UzyNx7ikimBHrViNgaCSEWpH8TfnTwhXipyQBUMj4FDC5Sv5dkZweTwKzI+tXrkCQgHq3SqYGG5qlsNblhelb+j3PnQeWx+aP9RXPrVmzuGtrhZAMjoR6ipTszWpHmidPSVnvqoiZfMhbYRkspyBV2GaOeMSROGU9xWhxFe+skuU9HHQ1z8sTwuUcYIrqzVS9tY7lMNhX7Gk0VGVjm6YxqzNbSROVYfj61GICTzSRoVGGGoEbseFJragtY2UbgKtpbRL0Aq0ZM51LKZjwpqdNMlbrXQpEvpTtqg0xGKmik/eap4dJVHzk1qhlFIXUd6AIVtEA5FKbVP7oqQzoO9RtdIO9ILkUlsOwpnkhVORT3vU9arzXmRgUAVnUbjRUbSMT0opDOgNManMwAJJwB3rMudYgjJWMGQjuOBVElxqrzlQh3EAe9Zs+sTSLiNRH79TT7e4trggTff8AVzkUDKPO8hQWHtS5wcVqvDOuQpRI+xRM/pVJ7bzJW2F3IGd7fKB7VNjRTaID60oNNIKcMVP0YGipaNoyT2JQaR0DD3poIFPBBqdjRWaEjnaI7W6etXYbgYz2qKziEt1GpGRnmtWXS7dh90r7qcVSVzCfuuxVNyuOTTC5lPT5e/vT2sJLcEr+8X1A5H4UgZNnDAn61L0BalO4DPOiIMsWwBUdzGY7p1PrWlpkIe5knI4jGB9TVbVlxdK3qKu3uhF++VxRSjkUoWszqLFvdhY/KkGQTgH0qrFcXFjO/kPtVj06inhRjBoERc4PTsauLOWrGzui2L2WRctcPyOijpTWaNgS7sW7EjmmxKqKc9aiZ8t7UcxKgmPVncDJJx60vSkDgdKTOTU3NEiVJGXoamS5bNVvpTlQnk07icUXo7qla4ycVQYxrxuJb26VIqOVBBzT1M2kWC27+IimlSf4zTFVx1FO59KlzkhcqGmFj/y0pv2Vz/GKcz7FJINRLcs3RcHtmkpyYcqH/YXP8QpDYsOrLUlvcuzAMtWJpF2k46Uc7W4rFE2J/wCei0VEbs+goq7yCyIp7mefiSTK/wB3HFQgDPzKpU9QAB+tOxSYpczOn2cRZvKZNsdsiH+9vJqm6MnWrmKQqCMGmpEuiug21vChVJSSoPBHVa1nVbjyTLiRB2DYD1gyRlD7VNaXbQnY3zRE5K+nuKs52mtGbsstlEu149vt5R/wrPezFy7PFG0EYHDPxk/SryStPCmJTgsMFTgsPSodbaJ44gjAyBvud/ypgZDhonKSDB/Q05WFbl/aCdIh5aID95iQMVhTwSWsxjk/A9jUtGkZliGZonDocMK1YdXUgCdCD/eXkVhpmplDHt+VRqjdqM9zpIpY5l3ROGHtWdrESKqyKAGJwcd6oRO8L742KsKsXtz9oSPsR1HvTcrohU3GWhZ02VRaMo+8CSfeq19E80ocAkAUyyk2ylexFX4mUMxPJ6Cnf3SH7s9DNjiZuAKkaAopJNW5ZlB6DPoBVOWdnODwKy3Nk2yE561NCPMHl5wTyDWjb2MBjBPz55zTLyzWNBJCNpU81aREpxl7pjymRJCsh5H604HP0p94wkQORhxwafaWzzgFQTTZEfd0YwcinCtBbSO3w0zDk4CjvUWoRhJAyjAIpW0LUk3YhQgdaSWfb92oiajl61KLaL9m0cz7XQZPepB8kxXsOlVtNcecATg9qmnlVLghj0rVbHPPcsk1G0ir1Iqjcah/DH+dUWmdzlmNBma0l0o6DNVnulY42UWZWZdp+8KW4gVlJXhh2qLq9mMWOdUOcVa8+KVCNw5rHVsdTTCxzkGh00xp2NMQJ6iis0SuP4jRRyvuF0WF6/hTTRRUnaA6UHrRRQA2b/VmqYoorSGxzVtzX0v/AI9D/wBdP6VtSf61KKKsyM7xF/qof941n3n/AB5w/Vv6UUUgIYPuipxRRWb3OuOw9vurTTRRUlodaf8AHwPoaur1aiinL4TCXxkB/j+lVz94/WiikbI2tM/49V+pqxL900UVotjjl8TOeuerfWtXSP8AUn8KKKSLq7kOp/8AHzH9adqf3I6KKb2Y4/ZM7tTZOhooqEbsdZ/65PrRqX/H0/0FFFaROepuilSUUUzItaf/AMfAq4/+teiispbgZj/eNNoorUAooooA/9k=");
        DriverEntity d9 = new DriverEntity(d.getId(), d.getName(), d.getGps(), d.getVictories(), d.getDate(), d.isActive(), d.isWorldchampion(), d.getPhoto());
        d9.setName("Charles Leclerc");
        d9.setGps("77");
        d9.setPhoto("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");
        DriverEntity d10 = new DriverEntity(d.getId(), d.getName(), d.getGps(), d.getVictories(), d.getDate(), d.isActive(), d.isWorldchampion(), d.getPhoto());
        d10.setName("Mark Webber");
        d10.setGps("289");

         */


        lista = new ArrayList();
        lista=presenter.getAllSummarize();
        final RecyclerView recyclerView = (RecyclerView) findViewById(R.id.recyclerView);
        adapter = new DriversAdapter(lista);
        TextView textView = (TextView) findViewById(R.id.textView);
        String results = (lista.size() + " resultados");
        textView.setText(results);
        adapter.setOnClickListener(new View.OnClickListener() {

            @Override
            public void onClick(View v) {
                int position = recyclerView.getChildAdapterPosition(v);
                presenter.onClickItem(lista.get(position).getId());

            }

        });
        recyclerView.setAdapter(adapter);
        recyclerView.setLayoutManager(new LinearLayoutManager(this));
        //lista.add(d1); lista.add(d2); lista.add(d3); lista.add(d4); lista.add(d5); lista.add(d6); lista.add(d7); lista.add(d8); lista.add(d9); lista.add(d10);




        recyclerView.setLayoutManager(new LinearLayoutManager(this));
        ItemTouchHelper.SimpleCallback simpleCallback = new ItemTouchHelper.SimpleCallback(0, ItemTouchHelper.LEFT | ItemTouchHelper.RIGHT) {
            @Override
            public boolean onMove(@NonNull RecyclerView recyclerView, @NonNull RecyclerView.ViewHolder viewHolder, @NonNull RecyclerView.ViewHolder target) {
                return false;
            }


            @Override
            public void onSwiped(@NonNull RecyclerView.ViewHolder viewHolder, int direction) {
                final int position = viewHolder.getAdapterPosition();
                deleted = lista.get(position);
                if(lista.remove(position)==deleted){
                    adapter.notifyItemRemoved(position);
                    adapter.notifyDataSetChanged();
                    presenter.delete(deleted);
                }


                Toast toast = Toast.makeText(getApplicationContext(),"Piloto "+position+" eliminado", Toast.LENGTH_SHORT);
                toast.show();

            }
        };



        ItemTouchHelper itemTouchHelper = new ItemTouchHelper(simpleCallback);
        itemTouchHelper.attachToRecyclerView(recyclerView);


        FloatingActionButton fab = findViewById(R.id.fab);
        fab.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                 presenter.onClickFloatingButton();

            }
        });


    }

    @Override
    protected void onActivityResult(int requestCode, int resultCode, @Nullable Intent data) {
        super.onActivityResult(requestCode, resultCode, data);
        if(resultCode == RESULT_CANCELED){
            System.out.println("Back");
        }else{
            if(!data.getExtras().getString("name").equals("")){
                nameFilter = data.getExtras().getString("name");
            }else{

            }

            if(!data.getExtras().getString("date").equals("")){
                dateFilter = data.getExtras().getString("date");
            }

        }
    }


    @Override
    protected void onResume() {
        Log.d(TAG, "Starting onResume");
        super.onResume();

        if(nameFilter==null && dateFilter==null){
            lista = presenter.getAllSummarize();
            adapter.notifyDataSetChanged();
        }else{
            lista = presenter.getFilteredDrivers(nameFilter, dateFilter);
            nameFilter = null;
            dateFilter = null;

            adapter.notifyDataSetChanged();
        }


        // Inicializa el RecyclerView
        final RecyclerView recyclerView = (RecyclerView) findViewById(R.id.recyclerView);

        // Crea el Adaptador con los datos de la lista anterior
        adapter = new DriversAdapter(lista);

        // Asocia el elemento de la lista con una acción al ser pulsado
        adapter.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                // Acción al pulsar el elemento
                int position = recyclerView.getChildAdapterPosition(v);
                /*Toast.makeText(ListActivity.this, "Posición: " + String.valueOf(position) +" Name: " + items.get(position).getName(), Toast.LENGTH_SHORT)
                        .show();
                 */
                presenter.onClickItem(lista.get(position).getId());
            }
        });

        // Asocia el Adaptador al RecyclerView
        recyclerView.setAdapter(adapter);

        // Muestra el RecyclerView en vertical
        recyclerView.setLayoutManager(new LinearLayoutManager(this));

    }

    @Override
    protected void onStart() {
        Log.d(TAG, "Starting onStart");
        super.onStart();
    }

    @Override
    protected void onPause() {
        Log.d(TAG, "Starting onPause");
        super.onPause();
    }

    @Override
    protected void onStop() {
        Log.d(TAG, "Starting onStop");
        super.onStop();
    }

    @Override
    protected void onRestart() {
        Log.d(TAG, "Starting onRestart");
        super.onRestart();
    }





        @Override
        public void StartFormActivity() {
            Intent intent = new Intent(getApplicationContext(), FormActivity.class);
            startActivity(intent);
        }

    @Override
    public void StartFormActivity(String id) {
        Intent intent = new Intent(getApplicationContext(), FormActivity.class);
        intent.putExtra("id", id);
        startActivity(intent);
    }

    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        // Inflate the menu; this adds items to the action bar if it is present.
        getMenuInflater().inflate(R.menu.menu_main, menu);
        return true;
    }
    @Override
    public boolean onOptionsItemSelected(MenuItem item) {

        int id = item.getItemId();

        //noinspection SimplifiableIfStatement
        if (id == R.id.search) {
            presenter.onClickSearchButton();
            return true;
        }
        if(id == R.id.action_about){
            presenter.onClickAboutButton();
            return true;
        }

        return super.onOptionsItemSelected(item);
    }

    @Override
    public void StartAboutActivity() {
        Intent intent = new Intent(getApplicationContext(), AboutActivity.class);
        startActivity(intent);
    }

    @Override
    public void StartSearchActivity() {
        Intent intent = new Intent(getApplicationContext(), SearchActivity.class);
        startActivityForResult(intent, 0);
    }
}
